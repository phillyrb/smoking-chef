#!/usr/bin/env ruby

require 'rubygems'
require 'rubygems/installer'
require 'logger'

module Runner
  class Harness
    attr_accessor :logger
    attr_accessor :state
    attr_accessor :blacklist

    BLACKLIST_FILE = 'blacklist.marshal'
    STATE_FILE     = 'state.marshal' 

    def initialize
      setup_logger
      run_loop
    end

    def load_marshal(filename)
      Marshal.load(File.read(filename)) || [ ] rescue [ ]
    end

    def dump_marshal(obj, filename)
      File.open(filename, 'w') { |f| f << Marshal.dump(obj) }
    end

    def load_blacklist
      logger.debug 'loading blacklist'
      self.blacklist = load_marshal(BLACKLIST_FILE)
    end

    def load_state
      logger.debug 'loading state'
      self.state = load_marshal(STATE_FILE)
    end

    def dump_state
      logger.debug 'dumping state'
      dump_marshal(state, STATE_FILE)
    end

    def setup_logger
      self.logger = Logger.new 'test-runner.log'
      logger.level = Logger::DEBUG
      logger.debug 'logger initialized'
    end
    
    def run_loop
      logger.debug 'entering run loop'

      load_state
      load_blacklist

      logger.debug 'globbing'

      gems = Dir["/vagrant/valid-gems/*.gem"].map { |x| File.basename x }
	
      ((gems - state) - blacklist).each do |gem|
        system(*%W[rvm gemset clear])
        system(*%W[gem install rubygems-test])

        logger.info "testing #{gem}"
        system(*%W[gem install /vagrant/valid-gems/#{gem}])

        if $?.exitstatus == 0
          gi = Gem::Installer.new("/vagrant/valid-gems/#{gem}")
          system(*%W[gem test #{gi.spec.name} -v #{gi.spec.version}])
        end

        state.push(gem)
      end

      dump_state
    end
  end
end

Runner::Harness.new
