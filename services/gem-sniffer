#!/usr/bin/env ruby

require 'rubygems'
require 'rubygems/installer'
require 'fileutils'
require 'tempfile'
require 'sqlite3'
require 'thread'

ROOT = '/storage/rubygems-mirror'
KNOWN_FILE = File.join(ROOT, "known")
VALID_FILE = File.join(ROOT, "valid")

$glob       = Dir["/storage/rubygems-mirror/gems/*.gem"]
$known_gems_q = []
$valid_gems_q = []
$glob_mutex = Mutex.new
$puts_mutex = Mutex.new
$array_mutex = Mutex.new

$glob.compact!

if File.exist?(KNOWN_FILE)
  $known_gems = File.read(KNOWN_FILE).split(/\n/)
else
  $known_gems = []
end

$sqlite_thread = Thread.new do
  known = File.open(KNOWN_FILE, 'a')
  valid = File.open(VALID_FILE, 'a')

  at_exit { known.close; valid.close }

  loop do
    begin
      puts "Processing valid gems"
 
      $array_mutex.synchronize do
        while valid_gem = $valid_gems_q.shift
          valid.puts valid_gem
        end
      end
  
      puts "Processing known gems"
  
      $array_mutex.synchronize do
        while known_gem = $known_gems_q.shift
          known.puts known_gem
        end
      end

      Thread.pass 
      sleep 1
    rescue Exception => e
      puts e.message
    end
  end
end

$unpack_threads = (0..5).to_a.map do |x|
  Thread.new do
    loop do
      gem = $glob_mutex.synchronize do
        $glob.shift
      end
  
      $puts_mutex.synchronize { puts "Processing gem: #{gem}" }
  
      break unless gem
  
      base_gem = File.basename(gem)
  
      next if $known_gems.include?(base_gem) 
  
      $puts_mutex.synchronize { puts "new gem: #{base_gem}" }
  
      $array_mutex.synchronize { $known_gems_q << base_gem }
  
      begin
        inst = Gem::Installer.new(gem)
        tmpdir = Dir.mktmpdir
        inst.unpack(tmpdir)
  
        if File.exist?(File.join(tmpdir, '.gemtest'))
          $puts_mutex.synchronize { puts "valid gem: #{base_gem}" }
          $array_mutex.synchronize { $valid_gems_q << base_gem }
        end
      rescue Exception => e
        puts e.message
      ensure 
        FileUtils.rm_r tmpdir if tmpdir and File.exist?(tmpdir)
        Thread.pass
      end
    end
  end
end

$unpack_threads.map(&:join)

until $known_gems_q.empty? and $valid_gems_q.empty?
  puts "Dumping Queues: known: #{$known_gems_q.length} valid: #{$valid_gems_q.length}"
  Thread.pass
  sleep 5
end

$sqlite_thread.exit

exit 0
