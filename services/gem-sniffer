#!/usr/bin/env ruby

require 'rubygems'
require 'rubygems/installer'
require 'fileutils'
require 'tempfile'
require 'sqlite3'
require 'thread'

ROOT = '/storage/rubygems-mirror'
DB = File.join(ROOT, 'gems.db')

SQL = [
  %q[create table valid_gems (filename varchar primary key)],
  %q[create table known_gems (filename varchar primary key)]
]

init_sql = !File.exist?(DB)

db = SQLite3::Database.new(DB)

if init_sql
  SQL.each do |sql|
    db.execute sql
  end
end

known_gems = db.execute("select filename from known_gems").map { |x| x[0] }
glob       = Dir["/storage/rubygems-mirror/gems/*.gem"]
known_gems_q = Queue.new
valid_gems_q = Queue.new
glob_mutex = Mutex.new

unpack_threads = (0..5).to_a.map do |x|
  Thread.new do
    loop do
      gem = glob_mutex.synchronize do
        glob.shift
      end
      
      break unless gem

      base_gem = File.basename(gem)

      next if known_gems.include?(base_gem) 

      known_gems_q << base_gem

      begin
        inst = Gem::Installer.new(gem)
        tmpdir = Dir.mktmpdir
        inst.unpack(tmpdir)

        if File.exist?(File.join(tmpdir, '.gemtest'))
          valid_gems_q << base_gem
        end

      ensure 
        FileUtils.rm_r tmpdir if tmpdir and File.exist?(tmpdir)
      end
    end
  end
end

sqlite_thread = Thread.new do
  loop do
    while known_gem = known_gems_q.shift
      db.execute("insert into known_gems (filename) values (?)", known_gem)
    end
    while valid_gem = valid_gems_q.shift
      db.execute("insert into valid_gems (filename) values (?)", valid_gem)
    end
  end
end

until unpack_threads.reject(&:alive?).length == 0 and known_gems_q.empty? and valid_gems_q.empty?
  sleep 1
end

sleep 5

sqlite_thread.kill

exit 0
